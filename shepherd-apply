#!/bin/bash
set -e -o pipefail

PROJECT_ID=$1
#
# Applies new Kubernetes configuration for given project. Called from `shepherd-build` script
# after a new image has been built. Run this script if you make any changes to the project Kubernetes
# yaml config file and you want to redeploy the app quickly, without having to build it first.
#
# Accepts parameters:
# - the project id, e.g. vaadin-boot-example-gradle
#
# Expects:
# - a k8s resource config file yaml named /etc/shepherd/k8s/vaadin-boot-example-gradle.yaml
#
# The k8s resource config file should:
# - be namespaced to shepherd-$PROJECT_ID
# - include all definitions for pod, service and ingress

if [[ -z "${PROJECT_ID}" ]]; then
  echo "project_id missing; should be e.g. vaadin-boot-example-gradle"
  echo
  echo "Use: $0 project_id"
  exit 1
fi

K8S_RESOURCE_CONFIG_FILE="/etc/shepherd/k8s/${PROJECT_ID}.yaml"

if [[ ! -f "$K8S_RESOURCE_CONFIG_FILE" ]]; then
  echo "$K8S_RESOURCE_CONFIG_FILE does not exist"
  exit 1
fi

IMAGE="localhost:32000/shepherd/${PROJECT_ID}"

# 1. Obtain the hash of new image
IMAGE_AND_HASH=`docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE:latest"`
# this will produce something like:
#   localhost:32000/test/vaadin-boot-example-gradle@sha256:62d6de89ced35ed07571fb9190227b08a7a10c80c97eccfa69b1aa5829f44b9a
echo "Newest image and hash: $IMAGE_AND_HASH"

# 2. generate new k8s resource config and apply.
cat "$K8S_RESOURCE_CONFIG_FILE" | sed "s#<<IMAGE_AND_HASH>>#$IMAGE_AND_HASH#" >"/tmp/${PROJECT_ID}.yaml"

echo "Applying new k8s resource config file"
microk8s kubectl apply -f "/tmp/${PROJECT_ID}.yaml"

# 3. delete the local docker image. The image is obsolete now since Kubernetes will use the one
# that has been uploaded to its registry.
echo "Deleting local docker image $IMAGE"
docker image rm "$IMAGE"
